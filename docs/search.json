[
  {
    "objectID": "LICENSE.html",
    "href": "LICENSE.html",
    "title": "MIT License",
    "section": "",
    "text": "Copyright (c) 2024 Danilo Freire\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n Back to top"
  },
  {
    "objectID": "tutorials.html",
    "href": "tutorials.html",
    "title": "Tutorials",
    "section": "",
    "text": "Below you will find a list of available tutorials with instructions on how to install and use the tools we will be using in class."
  },
  {
    "objectID": "tutorials.html#available-tutorials",
    "href": "tutorials.html#available-tutorials",
    "title": "Tutorials",
    "section": "Available Tutorials",
    "text": "Available Tutorials\n\n01 - VSCode and Anaconda Tutorial\n02 - Jupyter Notebook and Markdown Tutorial\n03 - GitHub Tutorial\n04 - PostgreSQL Tutorial\n\nPDF versions of the tutorials are also available on GitHub: https://github.com/danilofreire/qtm151-summer/tree/gh-pages."
  },
  {
    "objectID": "tutorials.html#additional-resources",
    "href": "tutorials.html#additional-resources",
    "title": "Tutorials",
    "section": "Additional Resources",
    "text": "Additional Resources\n\nFurther examples\n\ntesting-ipython.ipynb: A Jupyter Notebook for showing Markdown and code cells\ntesting-anaconda.py: A Python script for testing Anaconda installation\n\n\n\nSuggested Books\n\nPython for Data Analysis by Wes McKinney\nElements of Data Science by Allen Downey\nAutomate the Boring Stuff with Python by Al Sweigart\nPython for Everybody by Charles Severance\nSQL for Data Scientists by Renee M. P. Teate\n\n\n\nOnline Courses\n\nCoursera: Python for Everybody Specialisation\nedX: Python Basics for Data Science\nCodecademy: Learn Python\nDataCamp: Introduction to SQL\nCoursera: SQL for Data Science\n\n\n\nDocumentation\n\nPython Documentation\nPandas Documentation\nPostgreSQL Documentation\nSQLBolt\nGithub Guides\n\nFor any questions or issues regarding these tutorials, please open a GitHub issue, submit a pull request, or create a discussion post.\nI hope you like the tutorials and find them useful!"
  },
  {
    "objectID": "lectures.html",
    "href": "lectures.html",
    "title": "Lectures",
    "section": "",
    "text": "The course covers the following main topics, with corresponding lecture materials available in the lectures folder in our course repository:"
  },
  {
    "objectID": "lectures.html#schedule",
    "href": "lectures.html#schedule",
    "title": "Lectures",
    "section": "Schedule",
    "text": "Schedule\n\nTuesday, May 13: Lecture 01: Welcome to QTM 151 - Introduction and Course Overview. Please make sure to install the necessary software for the course by following the Course Tutorials: How to Install Anaconda, Jupyter, PostgreSQL, VSCode, and Open a Free Educational Account on GitHub.\nWednesday, May 14: Lecture 02: Jupyter Notebooks, Packages, Variables, and Lists. Lecture Slides, Lecture Notebook.\nThursday, May 15: Lecture 03: Maths Operations, Arrays, and Boolean Logic. Lecture Slides, Lecture Notebook\n\nKahoot Quiz. The quiz is optional and will not be graded. We will do it in class! It is a fun way to review the material covered in the lecture.\n\nFriday, May 16: Lecture 04: Quiz 01 - Based on Lectures 01-03. The repository contains the quiz questions and will be made online on the day of the quiz.\nMonday, May 19: Lecture 05: Conditional Statements. Lecture Slides, Lecture Notebook.\nTuesday, May 20: Lecture 06: While and For Loops. Lecture Slides, Lecture Notebook.\nWednesday, May 21: Lecture 07: Functions. Lecture Slides, Lecture Notebook.\nThursday, May 22: Lecture 08: Data Wrangling with Pandas. Lecture Slides, Lecture Notebook.\nFriday, May 23: Lecture 09: Quiz 02 - Based on Lectures 05-08. As with Quiz 01, the repository will be available on the day of the quiz.\nMonday, May 26: Lecture 10: Subsetting and Filtering Data. Lecture Slides, Lecture Notebook.\nTuesday, May 27: Lecture 11: Introduction to SQL. Lecture Slides, Lecture Notebook.\nWednesday, May 28: Lecture 12: SQL in Python. Lecture Slides, Lecture Notebook.\nThursday, May 29: Lecture 13: Merge Tables in SQL. Lecture Slides, Lecture Notebook.\nFriday, May 30: Lecture 14: Quiz 03 - Based on Lectures 10-13.\n\nEach lecture folder contains an HTML file or a Jupyter notebook (.ipynb) with code examples and explanations, along with any additional resources or datasets used in the lecture."
  },
  {
    "objectID": "testing-ipython.html",
    "href": "testing-ipython.html",
    "title": "Welcome to QTM 151!",
    "section": "",
    "text": "print(\"Welcome to QTM 151!\")\n\nx = 5\ny = 10\nz = x + y\nprint(z)\n\nWelcome to QTM 151!\n15\nThis is a Jupyter Notebook. You can write text, equations, and code in this notebook."
  },
  {
    "objectID": "testing-ipython.html#footnotes",
    "href": "testing-ipython.html#footnotes",
    "title": "Welcome to QTM 151!",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThis is the first footnote.↩︎\nThis is the second footnote.↩︎"
  },
  {
    "objectID": "02-jupyter-markdown-tutorial.html",
    "href": "02-jupyter-markdown-tutorial.html",
    "title": "Jupyter Notebook and Markdown Tutorial",
    "section": "",
    "text": "This tutorial will introduce you to Jupyter Notebook and Markdown. Jupyter Notebook is an interactive computing platform that allows users to create and share documents that contain live code, equations, visualisations, and narrative text. Markdown is a lightweight markup language that is used to format text, and can be used for everything - websites, documents, notes, books, presentations, email messages, and technical documentation. Even WhatsApp and Facebook Messenger use Markdown to format messages. So if you have already italicised a word or made a text bold on WhatsApp, you have used Markdown!\nThis tutorial is divided into two parts. The first part will introduce you to Jupyter Notebook and show you how to create a new notebook, run code cells, and format text cells using Markdown. The second part will provide a more in-depth look at Markdown and show you how to create headings, lists, links, images, and tables."
  },
  {
    "objectID": "02-jupyter-markdown-tutorial.html#what-is-jupyter-notebook",
    "href": "02-jupyter-markdown-tutorial.html#what-is-jupyter-notebook",
    "title": "Jupyter Notebook and Markdown Tutorial",
    "section": "What is Jupyter Notebook?",
    "text": "What is Jupyter Notebook?\nJupyter Notebook is an open-source web application that allows you to create and share documents that contain live code, equations, visualizations, and narrative text. Jupyter Notebook supports over 40 programming languages, including Python, R, and Julia. Jupyter Notebook is widely used in data science, machine learning, scientific computing, and other fields.\nJupyter Notebooks provide an interactive development environment that allows you to write and execute code, see the results immediately, and create reproducible analyses. Jupyter Notebooks are organized into cells, which can contain code, text, equations, or visualisations. You can run individual cells or the entire notebook, and you can save your work as a notebook file (.ipynb) that can be shared with others."
  },
  {
    "objectID": "02-jupyter-markdown-tutorial.html#creating-a-new-notebook",
    "href": "02-jupyter-markdown-tutorial.html#creating-a-new-notebook",
    "title": "Jupyter Notebook and Markdown Tutorial",
    "section": "Creating a New Notebook",
    "text": "Creating a New Notebook\nFirst, please make sure you have Python, Jupyter Notebook, and VSCode installed on your computer. If you do not have these installed, please refer to the VSCode and Anaconda Tutorial for instructions on how to install them.\nTo create a new Jupyter Notebook in VSCode, please go to the tab “File” &gt; “New File”. You will see a prompt in the middle of the screen. Select the option “Jupyter Notebook”.\n\n\n\nCreating a new Jupyter Notebook in VSCode.\n\n\nA new Jupyter Notebook will be created with the file extension .ipynb. You can rename the notebook by clicking on the notebook name at the top of the screen. An empty notebook will look like this:\n\n\n\nAn empty Jupyter Notebook.\n\n\nPlease do not forget to select the Python interpreter that you want to use for the notebook. You can do this by clicking on the Python version at the top right corner of the screen. A prompt will appear, and you can select the Python interpreter that you want to use (in this case, Anacoda’s “base”).\n\n\n\nSelecting the Python interpreter for the notebook.\n\n\nTo create a chunk of Python code click on “+ Code.” You will get an empty gray box which has Python on the lower-right corner. You can type Python code in this box and run it by clicking on the “Run” button on the left side of the box. You can also run the code by pressing “Shift + Enter” on your keyboard.\n\n\n\nA code cell in a Jupyter Notebook.\n\n\nHere you should enter the Python commands. For example, type the following lines of code in the code cell:\n\nprint(\"Welcome to QTM 151!\")\n\nx = 5\ny = 10\nz = x + y\nprint(z)\n\nThe results of the code will be displayed below the code cell. In this case, the output will be:\n\n\n\nOutput of the code cell.\n\n\nTo create a text cell click on “+ Markdown.” You will get an empty white box where you can type text. We will cover Markdown in more detail in the next section. But for now, you can type the following text in the Markdown cell:\n# Welcome to QTM 151!\n\nThis is a Jupyter Notebook. You can write *text*, **equations**, and `code` \nin [this notebook](https://github.com/danilofreire/qtm151/blob/main/tutorials/testing-ipython.ipynb). \nThe text will be displayed in the text cell like this:\n\n\n\nA text cell in a Jupyter Notebook.\n\n\nYou can run the text cell by clicking the “Run” button on the left side of the box or by pressing “Shift + Enter” on your keyboard. The first text block shows how the text looks before running the cell, and the second block shows how it looks after running the cell. Just double click on the space where the text is to edit the Markdown block. This is should open the gray box again."
  },
  {
    "objectID": "02-jupyter-markdown-tutorial.html#why-use-markdown",
    "href": "02-jupyter-markdown-tutorial.html#why-use-markdown",
    "title": "Jupyter Notebook and Markdown Tutorial",
    "section": "Why Use Markdown?",
    "text": "Why Use Markdown?\nMarkdown is a great way to format text because it is simple, easy to learn, and widely supported. You can use Markdown to create headings, lists, tables, equations, and figures in your documents. Markdown is used in many different applications, including Jupyter Notebook, GitHub, and Slack. Learning Markdown will help you create well-formatted documents that are easy to read and share."
  },
  {
    "objectID": "02-jupyter-markdown-tutorial.html#headings",
    "href": "02-jupyter-markdown-tutorial.html#headings",
    "title": "Jupyter Notebook and Markdown Tutorial",
    "section": "Headings",
    "text": "Headings\nYou can create headings using the # symbol. For example, # Heading 1 creates a first-level heading, ## Heading 2 creates a second-level heading, and so on. You can create up to six levels of headings using the # symbol.\n# Heading 1\n## Heading 2\n### Heading 3"
  },
  {
    "objectID": "02-jupyter-markdown-tutorial.html#lists",
    "href": "02-jupyter-markdown-tutorial.html#lists",
    "title": "Jupyter Notebook and Markdown Tutorial",
    "section": "Lists",
    "text": "Lists\nTo create an ordered list with nested unordered sub-items in Markdown, you can write the following code:\n1. This is an ordered list.\n2. This is the second item in the ordered list.\n  - This is a sub-item in the unordered list.\n    - This is a sub-sub-item in the unordered list.\n\nThis is an ordered list.\nThis is the second item in the ordered list.\n\nThis is a sub-item in the unordered list.\n\nThis is a sub-sub-item in the unordered list.\n\n\n\nYou can also create unordered lists:\n- This is an unordered list.\n- This is the second item in the unordered list.\n  - This is a sub-item in the unordered list.\n\nThis is an unordered list.\nThis is the second item in the unordered list.\n\nThis is a sub-item in the unordered list."
  },
  {
    "objectID": "02-jupyter-markdown-tutorial.html#tables",
    "href": "02-jupyter-markdown-tutorial.html#tables",
    "title": "Jupyter Notebook and Markdown Tutorial",
    "section": "Tables",
    "text": "Tables\nYou can create tables using the | symbol. For example:\nTable: Your Caption \n\n| A            | New              | Table          |\n|:-------------|:----------------:|---------------:|\n|left-aligned  |centre-aligned    |right-aligned   |\n|*italics*     |~~strikethrough~~ |**boldface**    |\n\nYour Caption\n\n\nA\nNew\nTable\n\n\n\n\nleft-aligned\ncentre-aligned\nright-aligned\n\n\nitalics\nstrikethrough\nboldface\n\n\n\nThe : symbols in the second row of the table determine the alignment of the text in each column. You can use left, center, or right to align the text."
  },
  {
    "objectID": "02-jupyter-markdown-tutorial.html#creating-markdown-tables-from-pandas-dataframes-in-jupyter-notebooks",
    "href": "02-jupyter-markdown-tutorial.html#creating-markdown-tables-from-pandas-dataframes-in-jupyter-notebooks",
    "title": "Jupyter Notebook and Markdown Tutorial",
    "section": "Creating Markdown Tables from Pandas DataFrames in Jupyter Notebooks",
    "text": "Creating Markdown Tables from Pandas DataFrames in Jupyter Notebooks\nWhen working with pandas DataFrames, you can convert them into Markdown tables for better presentation. The method is also relatively simple. Here is how to do it:\n\nPrerequisites\nEnsure you have the following installed:\n\nJupyter Notebook\npandas\ntabulate (for enhanced table formatting)\n\nJupyter Notebook and pandas are included in the Anaconda distribution. You can install tabulate using conda install in your terminal. If you are using VS Code, you can open a terminal by clicking on “Terminal” &gt; “New Terminal” in the top menu. Then run the following command:\nconda install tabulate\n\n\nBasic Method: Using pandas.DataFrame.to_markdown()\npandas provides a built-in method to_markdown() for converting DataFrames to Markdown tables.\n\nStep 1: Import pandas and create a DataFrame\nYou can create a dataframe by passing a dictionary to the pd.DataFrame() constructor:\n\n# If necessary, install pandas and tabulate \n# You should have pandas installed if you installed Anaconda, \n# but if you do not, you can install both with the following terminal command:\n# conda install pandas tabulate\n\n# Import pandas\nimport pandas as pd\nfrom tabulate import tabulate\n\n# Create a sample DataFrame\ndata = {\n    \"Name\": [\"Alice\", \"Bob\", \"Charlie\"],\n    \"Age\": [25, 30, 35],\n    \"City\": [\"New York\", \"London\", \"Paris\"]\n}\ndf = pd.DataFrame(data)\n\n\n\nStep 2: Convert DataFrame to Markdown\nThen you just need to call the to_markdown() method on the DataFrame:\n\n# Print the DataFrame as a Markdown table, excluding the index\nmarkdown_table = df.to_markdown(index=False)\nprint(markdown_table)\n\nThis will output:\n| Name    | Age  | City     |\n|:--------|-----:|:---------|\n| Alice   |   25 | New York |\n| Bob     |   30 | London   |\n| Charlie |   35 | Paris    |\n\n\nStep 3: Display in Jupyter Notebook\nTo display the Markdown table in a Jupyter Notebook cell, use the display() function from the IPython.display module:\n\n# You should also have the IPython package installed if you installed Anaconda\n# If not, you can install it with\n# conda install ipython\n\n# Import the Markdown display class. \n# This is what allows us to display Markdown in Jupyter Notebooks \nfrom IPython.display import display, Markdown\n\n# Display the Markdown table\ndisplay(Markdown(markdown_table))\n\nThis will render a nicely formatted table in your notebook:\n\n\n\nMarkdown table in a Jupyter Notebook.\n\n\n\n\n\nAdvanced Formatting\nYou can customise the Markdown table using various parameters of to_markdown():\n\n# Customising the Markdown table using the to_markdown() method\nmarkdown_table = df.to_markdown(\n    index=False,  # Don't include index\n    tablefmt=\"pipe\",  # Use pipe format\n    floatfmt=\".2f\",  # Format floats to 2 decimal places\n    headers=[\"Name\", \"Age (Years)\", \"City\"],  # Custom headers\n    colalign=(\"left\", \"center\", \"right\")  # Align columns\n)\ndisplay(Markdown(markdown_table))\n\n\n\nUsing tabulate for Enhanced Formatting\nThe tabulate library offers even more formatting options. While they are not necessary for basic tables, they can be useful for more complex tables. In our course, you will probably not need them, but I will show you how to use them for your reference. Please check their documentation for more information.\n\nfrom tabulate import tabulate\n\nmarkdown_table = tabulate(df, headers='keys', tablefmt='pipe', showindex=False)\ndisplay(Markdown(markdown_table))\n\n\n\nBest Practices\n\nIndex: Consider whether you need the index in your table. Often, it is cleaner to exclude it using index=False.\nFormatting: Use floatfmt to control decimal places for numerical data.\nHeaders: Customize headers for clarity, especially if your DataFrame column names are not user-friendly.\nTable Format: Experiment with different tablefmt options to find the most suitable for your needs.\nLarge DataFrames: For large DataFrames, consider displaying only a subset of rows or columns to maintain readability.\n\n\n\nExample: Comprehensive Table Creation\nHere is a more comprehensive example incorporating various best practices:\n\n# Import necessary packages\nimport pandas as pd\nfrom IPython.display import display, Markdown\nfrom tabulate import tabulate\n\n# Create a sample DataFrame\ndata = {\n    \"Product\": [\"Laptop\", \"Smartphone\", \"Tablet\"],\n    \"Price\": [999.99, 599.50, 299.75],\n    \"Stock\": [50, 100, 75],\n    \"Rating\": [4.5, 4.8, 4.2]\n}\ndf = pd.DataFrame(data)\n\n# Create a formatted Markdown table\nmarkdown_table = tabulate(\n    df,\n    headers=[\"Product Name\", \"Price ($)\", \"Stock Quantity\", \"Customer Rating\"],\n    tablefmt=\"pipe\", # Format as Markdown table\n    floatfmt=(\".2f\", \".2f\", \"d\", \".1f\"),\n    showindex=False, # Don't show the index (row numbers)\n    numalign=\"right\", # Align numbers to the right\n    stralign=\"left\" # Align strings (text, first column) to the left\n)\n\n# Display the table in the notebook\ndisplay(Markdown(\"### Product Inventory Summary\"))\ndisplay(Markdown(markdown_table))\n\nThis will produce a well-formatted table with custom headers, appropriate number formatting, and a title.\n\n\n\nComprehensive Markdown table in a Jupyter Notebook."
  },
  {
    "objectID": "02-jupyter-markdown-tutorial.html#equations",
    "href": "02-jupyter-markdown-tutorial.html#equations",
    "title": "Jupyter Notebook and Markdown Tutorial",
    "section": "Equations",
    "text": "Equations\nYou can create equations using the $$ symbol. For example in Equation 1, we have the formula for the standard deviation of a population:\n$$\n\\sigma = \\sqrt{\\frac{\\sum_{i=1}^{N} (x_i - \\mu)^2}{N}}\n$$ {#eq-stddev}\n\\[\n\\sigma = \\sqrt{\\frac{\\sum_{i=1}^{N} (x_i - \\mu)^2}{N}}\n\\tag{1}\\]\nYou can also create equations inline by using the $ symbol. For example, $\\alpha = \\beta + \\gamma$ will render as \\(\\alpha = \\beta + \\gamma\\). To learn more about how to write equations in using Markdown, you can refer to the Overleaf documentation."
  },
  {
    "objectID": "02-jupyter-markdown-tutorial.html#figures",
    "href": "02-jupyter-markdown-tutorial.html#figures",
    "title": "Jupyter Notebook and Markdown Tutorial",
    "section": "Figures",
    "text": "Figures\nYou can include figures in your document using the ![Caption](path/to/image.png){#fig-label} syntax. For example:\n![This is a figure caption.](path/to/image.png){#fig-label}\nThis will include the image path/to/image.png in your document with the caption “This is a figure caption.” You can refer to the figure using the label fig-label, but this is optional.\nIf you are creating plots on Jupyter Notebook, the graphs will appear after the code cell that generates them."
  },
  {
    "objectID": "02-jupyter-markdown-tutorial.html#citations",
    "href": "02-jupyter-markdown-tutorial.html#citations",
    "title": "Jupyter Notebook and Markdown Tutorial",
    "section": "Citations",
    "text": "Citations\nAlthough Markdown has excellent reference support with BibTeX files, there is no reliable way to include citations automatically in Jupyter Notebooks. The two packages I know that manage citations, cite2c and Jupyterlab Citation Manager, are not ideal. The first has not been maintained for years, while the second is not ready for most uses. Therefore, I suggest simply copying the citation from Google Scholar and pasting it into a Markdown cell titled “References” at the end of your document. The same approach applies for inline citations."
  },
  {
    "objectID": "02-jupyter-markdown-tutorial.html#footnotes",
    "href": "02-jupyter-markdown-tutorial.html#footnotes",
    "title": "Jupyter Notebook and Markdown Tutorial",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThis is an inline footnote.↩︎\nYou can also include multiple paragraphs in a footnote by indenting the subsequent paragraphs.↩︎"
  },
  {
    "objectID": "01-vscode-anaconda-tutorial.html",
    "href": "01-vscode-anaconda-tutorial.html",
    "title": "Installing VS Code and Connecting it with Anaconda",
    "section": "",
    "text": "This tutorial will guide students new to computer programming through the process of installing Visual Studio Code (VS Code) and connecting it with Anaconda. We will cover each step in detail to ensure a smooth setup process. If you have any questions or encounter issues during the installation, please feel free to ask for help from me (danilo.freire@emory.edu) or the QTM151 teaching assistants."
  },
  {
    "objectID": "01-vscode-anaconda-tutorial.html#for-windows-users",
    "href": "01-vscode-anaconda-tutorial.html#for-windows-users",
    "title": "Installing VS Code and Connecting it with Anaconda",
    "section": "For Windows Users",
    "text": "For Windows Users\n\nRun the “VSCodeUserSetup-{version}.exe” file.\n\n\n\n\nWindows Installation\n\n\n\nAccept the license agreement and click “Next”.\n\n\n\n\nLicense Agreement\n\n\n\nChoose the installation location (default is recommended) and click “Next”.\n\n\n\n\nInstallation Location\n\n\n\nSelect additional tasks if desired (e.g., adding “Open with Code” action) and click “Next”.\n\n\n\n\nAdditional Tasks\n\n\n\nClick “Install” to begin the installation process.\n\n\n\n\nInstallation Progress"
  },
  {
    "objectID": "01-vscode-anaconda-tutorial.html#for-macos-users",
    "href": "01-vscode-anaconda-tutorial.html#for-macos-users",
    "title": "Installing VS Code and Connecting it with Anaconda",
    "section": "For macOS Users",
    "text": "For macOS Users\n\nOpen the downloaded .zip file and drag the VS Code application to the Applications folder.\n\n\n\n\nUnzip file\n\n\n\n\n\nDrag to Applications folder"
  },
  {
    "objectID": "01-vscode-anaconda-tutorial.html#for-linux-users",
    "href": "01-vscode-anaconda-tutorial.html#for-linux-users",
    "title": "Installing VS Code and Connecting it with Anaconda",
    "section": "For Linux Users",
    "text": "For Linux Users\n\nFollow the distribution-specific instructions provided on the VS Code website."
  },
  {
    "objectID": "01-vscode-anaconda-tutorial.html#launch-vs-code",
    "href": "01-vscode-anaconda-tutorial.html#launch-vs-code",
    "title": "Installing VS Code and Connecting it with Anaconda",
    "section": "Launch VS Code",
    "text": "Launch VS Code\n\nAfter installation, launch VS Code.\nYou should see the welcome screen with options to start a new project or open existing files.\n\n\n\n\nVS Code Welcome Screen"
  },
  {
    "objectID": "01-vscode-anaconda-tutorial.html#getting-started",
    "href": "01-vscode-anaconda-tutorial.html#getting-started",
    "title": "Installing VS Code and Connecting it with Anaconda",
    "section": "Getting Started",
    "text": "Getting Started\nMicrosoft has published a series of introductory videos to help you get started with VS Code. You can also read the official documentation for more detailed information."
  },
  {
    "objectID": "01-vscode-anaconda-tutorial.html#download-anaconda",
    "href": "01-vscode-anaconda-tutorial.html#download-anaconda",
    "title": "Installing VS Code and Connecting it with Anaconda",
    "section": "Download Anaconda",
    "text": "Download Anaconda\n\nVisit the Anaconda website: https://www.anaconda.com/products/distribution. You can skip the registration if you prefer.\n\n\n\n\nAnaconda Website\n\n\n\nClick on the “Download” button for your operating system.\n\n\n\n\nDownload Anaconda"
  },
  {
    "objectID": "01-vscode-anaconda-tutorial.html#for-windows-users-1",
    "href": "01-vscode-anaconda-tutorial.html#for-windows-users-1",
    "title": "Installing VS Code and Connecting it with Anaconda",
    "section": "For Windows Users",
    "text": "For Windows Users\n\nChoose “Just Me” for the installation type (recommended).\n\n\n\n\nAnaconda Installation\n\n\n\nSelect the installation location (default is fine).\n\n\n\n\nAnaconda Installation\n\n\n\nIn the “Advanced Options” section, check “Add Anaconda to my PATH environment variable” and “Register Anaconda as my default Python”.\n\n\n\n\nAdvanced Options"
  },
  {
    "objectID": "01-vscode-anaconda-tutorial.html#for-macos-users-1",
    "href": "01-vscode-anaconda-tutorial.html#for-macos-users-1",
    "title": "Installing VS Code and Connecting it with Anaconda",
    "section": "For macOS Users",
    "text": "For macOS Users\n\nOpen the downloaded .pkg file and follow the installation instructions. You can install Anaconda for all users.\n\n\n\n\nAnaconda Installation\n\n\n\nFollow the on-screen instructions, accepting the default options.\n\n\n\n\nAnaconda Installation"
  },
  {
    "objectID": "01-vscode-anaconda-tutorial.html#for-linux-users-1",
    "href": "01-vscode-anaconda-tutorial.html#for-linux-users-1",
    "title": "Installing VS Code and Connecting it with Anaconda",
    "section": "For Linux Users",
    "text": "For Linux Users\n\nPlease follow the distribution-specific instructions provided on the Anaconda website."
  },
  {
    "objectID": "01-vscode-anaconda-tutorial.html#verify-anaconda-installation",
    "href": "01-vscode-anaconda-tutorial.html#verify-anaconda-installation",
    "title": "Installing VS Code and Connecting it with Anaconda",
    "section": "Verify Anaconda Installation",
    "text": "Verify Anaconda Installation\n\nOpen a new terminal or command prompt. On VS Code, you can do it by clicking on “Terminal” &gt; “New Terminal” in the top menu.\nType conda --version and press Enter. You should see the Conda version number.\nType python --version and press Enter. You should see the Python version installed by Anaconda.\n\n\n\n\nVerify Anaconda Installation"
  },
  {
    "objectID": "01-vscode-anaconda-tutorial.html#install-the-python-and-jupyer-extensions-in-vs-code",
    "href": "01-vscode-anaconda-tutorial.html#install-the-python-and-jupyer-extensions-in-vs-code",
    "title": "Installing VS Code and Connecting it with Anaconda",
    "section": "Install the Python and Jupyer Extensions in VS Code:",
    "text": "Install the Python and Jupyer Extensions in VS Code:\n\nOpen VS Code and click on the Extensions view icon on the left sidebar (it looks like four squares). Search for “Python” in the search bar.\n\n\n\n\nPython Extension in VS Code\n\n\n\nFind the official Python extension by Microsoft and click “Install”.\nPlease also install the Jupyter extension for VS Code to work with Jupyter notebooks.\n\n\n\n\nJupyter Extension in VS Code"
  },
  {
    "objectID": "01-vscode-anaconda-tutorial.html#select-the-anaconda-python-interpreter",
    "href": "01-vscode-anaconda-tutorial.html#select-the-anaconda-python-interpreter",
    "title": "Installing VS Code and Connecting it with Anaconda",
    "section": "Select the Anaconda Python Interpreter:",
    "text": "Select the Anaconda Python Interpreter:\n\nCreate a Python file in VS Code. Click on the “New File” button in the top left corner and save it with a .py extension.\n\n\n\n\nNew Python File in VS Code\n\n\n\nInclude the following code in the file:\n\n\nimport sys\nprint(sys.version)\nprint(sys.executable)\n\n\nSave the file again. Here I saved it as testing-anaconda.py.\n\n\n\n\nSave Python File in VS Code\n\n\n\nPress Ctrl+Shift+P (Windows/Linux) or Cmd+Shift+P (macOS) to open the Command Palette.\n\n\n\n\nCommand Palette in VS Code\n\n\n\nType “Python: Select Interpreter” and select it from the list.\n\n\n\n\nSelect Python Interpreter\n\n\n\nChoose the Anaconda Python interpreter from the list. It should be labelled something like “Python 3.x.x (‘base’) Conda”."
  },
  {
    "objectID": "01-vscode-anaconda-tutorial.html#verify-the-connection",
    "href": "01-vscode-anaconda-tutorial.html#verify-the-connection",
    "title": "Installing VS Code and Connecting it with Anaconda",
    "section": "Verify the Connection:",
    "text": "Verify the Connection:\n\nPlease click on the “Run” button at the top right corner of the editor to execute the code in your .py file. Select “Run Current File in Dedicated Terminal”\n\n\n\n\nRun Python File in VS Code\n\n\n\nThe output should show the Anaconda Python version and its location.\n\n\n\n\nPython Output in VS Code"
  },
  {
    "objectID": "python-postgresql-example.html",
    "href": "python-postgresql-example.html",
    "title": "PostgreSQL Example",
    "section": "",
    "text": "Here is an example of how to use PostgreSQL with Python. The example uses the psycopg2 library to connect to a PostgreSQL database and perform some basic operations. Please refer to tutorial 04 for more information.\n\n# Install the required packages\n# conda install psycopg2\n\n# Import the required library\nimport psycopg2\n\n# Connect to the database\nconn = psycopg2.connect(\n    host=\"localhost\", \n    port=5432,\n    database=\"tutorial\",\n    user=\"postgres\",\n    password=\"\") # Change the password to your password\n\n# Create a cursor object. This is used to interact with the database.\ncur = conn.cursor()\n\n\n# Now we will execute the queries\ncur.execute(\"SELECT * FROM students\")\n\n# Fetch the results\nrows = cur.fetchall()\n\n# Print the results\nfor row in rows:\n    print(row)\n\n(1, 'Alice', 25)\n(2, 'Bob', 30)\n(3, 'Charlie', 35)\n\n\n\n# Let us run another query\ncur.execute(\"SELECT * FROM students WHERE name = 'Bob' \")\n\n# Fetch the results\nrows = cur.fetchall()\n\n# Print the results\nfor row in rows:\n    print(row)\n\n(2, 'Bob', 30)\n\n\n\n# Close the cursor and the connection. This is important as it will free up the resources.\ncur.close()\n\n# Commit the transaction. This will save the changes to the database. \n# You do not need to do this if you are only reading from the database.\nconn.commit()\n\n# Close the connection\nconn.close()\n\n\n# Converting tables to pandas dataframe\n# Install the required packages\n# conda install pandas sqlalchemy\n\n# Import the required libraries\nimport pandas as pd\nfrom sqlalchemy import create_engine\n\n# Create a connection to the database\n# The syntax is 'postgresql://username:password@host:port/database'\n# In our case, the username is postgres, password is blank, host is localhost, \n# port is 5432 and database is tutorial\nengine = create_engine('postgresql://postgres:@localhost:5432/tutorial')\n\n# Read the table into a pandas dataframe\ndf = pd.read_sql_table('students', engine)\n\n# Print the dataframe\nprint(df)\n\n   id     name  age\n0   1    Alice   25\n1   2      Bob   30\n2   3  Charlie   35\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "assignments.html",
    "href": "assignments.html",
    "title": "Assignments",
    "section": "",
    "text": "The course assessment consists of five assignments and three in-class quizzes, and a final project. Each assignment is worth 10% of your final grade (50%), while the three quizzes combined are worth the remaining 50%, or about 16.67% each."
  },
  {
    "objectID": "assignments.html#schedule",
    "href": "assignments.html#schedule",
    "title": "Assignments",
    "section": "Schedule",
    "text": "Schedule\nTo be announced."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "QTM 151 - Introduction to Statistical Computing II",
    "section": "",
    "text": "Welcome to QTM 151! This course introduces students to data analysis and statistical computing using Python and SQL. Please have a look at the course syllabus and the lecture schedule for more information. A brief overview of the course content is provided below."
  },
  {
    "objectID": "index.html#course-overview",
    "href": "index.html#course-overview",
    "title": "QTM 151 - Introduction to Statistical Computing II",
    "section": "",
    "text": "Welcome to QTM 151! This course introduces students to data analysis and statistical computing using Python and SQL. Please have a look at the course syllabus and the lecture schedule for more information. A brief overview of the course content is provided below."
  },
  {
    "objectID": "index.html#contact-information",
    "href": "index.html#contact-information",
    "title": "QTM 151 - Introduction to Statistical Computing II",
    "section": "Contact Information",
    "text": "Contact Information\n\nName: Danilo Freire\nContact: danilo.freire@emory.edu\nOffice Hours: By appointment at your convenience, please email me to schedule a meeting"
  },
  {
    "objectID": "index.html#repository-structure",
    "href": "index.html#repository-structure",
    "title": "QTM 151 - Introduction to Statistical Computing II",
    "section": "Repository Structure",
    "text": "Repository Structure\nWhile this website provides an overview of the course materials, the primary source of content is the course’s GitHub repository at https://github.com/danilofreire/qtm151-summer. The repository is organised as follows:\n\nassignments/: Contains all course assignments\nlectures/: Includes lecture materials and code\ntutorials/: Step-by-step guides for the tools used in the course\nsyllabus.pdf: Course syllabus in PDF format\n\nPlease also refer to the Discussion tab on the repository for any questions or comments: https://github.com/danilofreire/qtm151-summer/discussions.\nNote: The links will take you to the respective folders or files in the repository, not on this website. You can find links for the rendered content in the navigation bar above."
  },
  {
    "objectID": "index.html#course-content",
    "href": "index.html#course-content",
    "title": "QTM 151 - Introduction to Statistical Computing II",
    "section": "Course Content",
    "text": "Course Content\n\nLectures\nWe will meet every weekday from May 13th to May 30th, 2025 from 11:30 AM to 12:50 PM. Our meetings will be online via Zoom. The link is https://emory.zoom.us/j/1234567890 (please check the course website for the correct link). Please check the course schedule for the full list of topics and dates. Lecture materials are available in the lectures folder in the repository.\nEach folder contains an HTML presentation or a Jupyter notebook (.ipynb) with code examples and explanations, along with any additional resources or datasets used in the lecture.\n\n\nAssignments and Quizzes\nThroughout the course, students will complete various assignments and quizzes to reinforce their learning. The assignments will be posted in the assignments/ folder as the course progresses. The quizzes will be available as separate GitHub repositories. We will also announce these in class and on Canvas. Please refer to the syllabus or the lecture schedule for due dates and submission guidelines.\n\n\nTutorials\nThe tutorials/ tab contains step-by-step guides for various tools and techniques used in the course. Please have a look at these resources to help you get started.\nPDF versions of the tutorials are also available in the repository."
  },
  {
    "objectID": "index.html#course-requirements",
    "href": "index.html#course-requirements",
    "title": "QTM 151 - Introduction to Statistical Computing II",
    "section": "Course Requirements",
    "text": "Course Requirements\n\nPrerequisites: None, only willingness to learn and explore new tools!\nSoftware: Anaconda distribution of Python 3.x, VS Code, SQLite, and GitHub Desktop\nPlease also create an educational account on GitHub"
  },
  {
    "objectID": "index.html#grading",
    "href": "index.html#grading",
    "title": "QTM 151 - Introduction to Statistical Computing II",
    "section": "Grading",
    "text": "Grading\n\nAssignments: 50%\nClass Quizzes: 50%"
  },
  {
    "objectID": "index.html#course-policies-and-expectations",
    "href": "index.html#course-policies-and-expectations",
    "title": "QTM 151 - Introduction to Statistical Computing II",
    "section": "Course Policies and Expectations",
    "text": "Course Policies and Expectations\nFor detailed information on course policies, grading criteria, attendance requirements, and academic integrity guidelines, please refer to the syllabus in the repository or on the course website."
  },
  {
    "objectID": "index.html#getting-help",
    "href": "index.html#getting-help",
    "title": "QTM 151 - Introduction to Statistical Computing II",
    "section": "Getting Help",
    "text": "Getting Help\nIf you encounter any issues with the course materials or have questions about the content, please:\n\nCheck the course syllabus for relevant information\nReview the lecture materials and tutorials either in the repository or on the course website\nConsult with your classmates or post in the course discussion forum\nAttend office hours or schedule an appointment with the instructor"
  },
  {
    "objectID": "index.html#contributing-to-the-repository",
    "href": "index.html#contributing-to-the-repository",
    "title": "QTM 151 - Introduction to Statistical Computing II",
    "section": "Contributing to the Repository",
    "text": "Contributing to the Repository\nWhile this repository is primarily maintained by the course instructor, everyone is welcome to contribute. Please feel free to suggest improvements or report issues by opening a GitHub issue, submitting a pull request, creating a discussion post, or contacting the instructor directly."
  },
  {
    "objectID": "index.html#acknowledgements",
    "href": "index.html#acknowledgements",
    "title": "QTM 151 - Introduction to Statistical Computing II",
    "section": "Acknowledgements",
    "text": "Acknowledgements\nThis course and its materials have been developed with inspiration from previous version of this course, as well as various open-source communities and educational resources. I am particularly grateful to Alejandro Sánchez Becerra for his teaching materials and guidance. I am also thankful for the contributions of the Python, SQL, and data science communities that make courses like this possible."
  },
  {
    "objectID": "index.html#license",
    "href": "index.html#license",
    "title": "QTM 151 - Introduction to Statistical Computing II",
    "section": "License",
    "text": "License\nThis repository is licensed under the MIT License. You are free to use, modify, and distribute the materials as needed, with appropriate attribution to the original source.\n\nWe look forward to an engaging and productive semester! Good luck, and happy coding! :smiley:"
  },
  {
    "objectID": "03-github-tutorial.html",
    "href": "03-github-tutorial.html",
    "title": "GitHub Tutorial",
    "section": "",
    "text": "This tutorial will guide you through the process of creating a GitHub educational account, downloading and installing GitHub Desktop, and downloading the course materials from GitHub to your computer. The tutorial also covers the basics of Git and GitHub, such as creating a repository, committing changes, and pushing changes to GitHub. It will also show you how to use VS Code to edit and manage your code on GitHub. You can use any tool you prefer to version control your code."
  },
  {
    "objectID": "03-github-tutorial.html#footnotes",
    "href": "03-github-tutorial.html#footnotes",
    "title": "GitHub Tutorial",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nAs a curiosity, the code for the Apollo 11 mission is also available on GitHub.↩︎\nThe default branch in GitHub is called main. This is the branch where you will make most of your changes. You can create other branches if you want to work on different features or bug fixes.↩︎"
  },
  {
    "objectID": "04-postgresql-tutorial.html",
    "href": "04-postgresql-tutorial.html",
    "title": "PostgreSQL Tutorial",
    "section": "",
    "text": "Here we will learn how to use PostgreSQL, a powerful object-relational database system. The tutorial has instructions for installing PostgreSQL on your computer, using VS Code as a client, and writing SQL queries to interact with the database. It also includes a section on how to integrate PostgreSQL with Python via the psycopg2 library."
  },
  {
    "objectID": "04-postgresql-tutorial.html#footnotes",
    "href": "04-postgresql-tutorial.html#footnotes",
    "title": "PostgreSQL Tutorial",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nIn SQL, a database is a system that stores and organises multiple sets of related data. It typically contains several tables, each of which is a structured collection of data arranged in rows and columns. For instance, a ‘School’ database might contain separate tables for ‘Students’, ‘Teachers’, and ‘Classes’. Each table would store specific information: the ‘Students’ table might have columns for student ID, name, and year group, with each row representing an individual student’s details. Databases can also contain objects other than tables, such as views (virtual tables used for data retrieval), indexes (optimised data structures for faster data retrieval), and stored procedures (predefined SQL queries that can be reused). While databases are managed by Database Management Systems (DBMS), such as PostgreSQL, and handle overall data organisation and integrity, tables are manipulated using SQL commands for specific data operations within their structure, as we will see below.↩︎"
  },
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": "QTM 151 - Introduction to Statistical Computing II",
    "section": "",
    "text": "Welcome to QTM 151! This course introduces students to data analysis and statistical computing using Python and SQL. It is ideal for those with little or no programming experience who want to develop skills for data-driven decision making.\nOver the next three weeks, we will cover version control for collaborative coding, Jupyter Notebooks for reproducible research, Python programming basics, data wrangling and merging in SQL, data visualisation, and introductions to linear modelling and time series analysis.\nYou will work with real-world datasets and problems, gaining practical experience in using these tools to extract insights from data. The course aims to develop both technical skills and critical thinking needed for complex data challenges. By the end, you will be ready for advanced study in quantitative methods and data science."
  },
  {
    "objectID": "syllabus.html#suggested-books",
    "href": "syllabus.html#suggested-books",
    "title": "QTM 151 - Introduction to Statistical Computing II",
    "section": "Suggested Books",
    "text": "Suggested Books\n\nPython for Data Analysis by Wes McKinney\nElements of Data Science by Allen Downey\nAutomate the Boring Stuff with Python by Al Sweigart\nPython for Everybody by Charles Severance\nSQL for Data Scientists by Renee M. P. Teate"
  },
  {
    "objectID": "syllabus.html#online-courses",
    "href": "syllabus.html#online-courses",
    "title": "QTM 151 - Introduction to Statistical Computing II",
    "section": "Online Courses",
    "text": "Online Courses\n\nCoursera: Python for Everybody Specialisation\nedX: Python Basics for Data Science\nCodecademy: Learn Python\nDataCamp: Introduction to SQL\nCoursera: SQL for Data Science"
  },
  {
    "objectID": "syllabus.html#additional-resources",
    "href": "syllabus.html#additional-resources",
    "title": "QTM 151 - Introduction to Statistical Computing II",
    "section": "Additional Resources",
    "text": "Additional Resources\n\nPython Documentation\nPandas Documentation\nPostgreSQL Documentation\nSQLBolt\nDataLemur for SQL interview practice\nGithub Guides"
  }
]