---
title: QTM 151 - Introduction to Statistical Computing II
subtitle: Lecture 06 - While and For Loops
author:
  - name: Danilo Freire
    email: danilo.freire@emory.edu
    affiliations: Emory University
format:
  clean-revealjs:
    self-contained: true
    footer: "[While and For Loops](https://raw.githack.com/danilofreire/qtm151-summer/main/lectures/lecture-06/06-loops.html)"
transition: slide
transition-speed: default
scrollable: true
engine: jupyter
editor:
  render-on-save: true
---

# Nice to see you all! 😊 {background-color="#2d4563"}

# Brief recap of the last class {background-color="#2d4563"}

## Recap: conditional statements

:::{style="margin-top: 30px; font-size: 26px;"}
In our last lecture, we covered conditional statements:

-   **`if` statement:** Executes a block of code if a condition is `True`.
-   **`elif` statement:** Checks a new condition if previous `if` or `elif` conditions were `False`.
-   **`else` statement:** Executes a block of code if all preceding `if` and `elif` conditions were `False`.

We also looked at:
-   **Combining Conditions:** Using logical operators `and`, `or`, `not`.
-   **Nested `if` statements:** Placing one `if` statement inside another for more complex decision-making.
:::

## Recap: Conditional Example

:::{style="margin-top: 30px; font-size: 22px;"}
Remember this kind of structure?

```python
#| echo: true
#| eval: false
age = 22
is_student = True
has_scholarship = False

# Eligible if (under 25 AND a student) OR 
# if has a scholarship
if (age < 25 and is_student) or has_scholarship:
    print("Eligible for program discount.")
else:
    print("Not eligible for program discount.")
```

This ability to control program flow based on conditions is fundamental, and loops will build upon this by allowing us to repeat actions.
:::

# For loops in Python 🔄🐍 {background-color="#2d4563"}

## What is a `for` loop?

:::{style="margin-top: 30px; font-size: 24px;"}
:::{.columns}
:::{.column width="50%"}
- A `for` loop is a way to iterate over a sequence of elements
- It is a very useful tool to automate repetitive tasks
- The syntax is similar to an `if` statement, including the colon `:` and the necessary indentation (4 spaces)
- The syntax is as follows:
  
```{verbatim}
for element in sequence:
    do something
```
:::{style="margin-top: 20px;"}
:::

```{python}
#| echo: true
#| eval: true
variable = [1,2,3,4]

for i in variable:
    print(i)
```
:::

:::{.column width="50%"}
![](figures/for-loops.png)
:::
:::
:::

## What can you do with a `for` loop?

:::{style="margin-top: 30px; font-size: 23px;"}
:::{.columns}
:::{.column width="50%"}
- You can iterate over a list of elements
  - Numbers, strings, or any other type of object

- You can also iterate over a range of numbers
- You can even iterate over a list of lists (nested lists) 🤯
  - This is very useful when working with dataframes or matrices

```{python}
#| echo: true
#| eval: true
students_scores = [
    ["Alice", 85, 90, 88],
    ["Bob", 78, 82, 84],
    ["Charlie", 92, 95, 93]
]

for i in students_scores:
    print(i)
```
:::

:::{.column width="50%"}
![](figures/forloop.png)
:::
:::
:::

## Some examples

:::{style="margin-top: 30px; font-size: 24px;"}
```{python}
#| echo: true
#| eval: true
list_ids = ["KIA", "Ferrari", "Ford", "Tesla"]
print("Dear customer, we are writing about your " + list_ids[0] + " car.")
print("Dear customer, we are writing about your " + list_ids[1] + " car.")
print("Dear customer, we are writing about your " + list_ids[2] + " car.")
print("Dear customer, we are writing about your " + list_ids[3] + " car.")
```

:::{.fragment .fade-in}
- This is a very boring! 🥱
:::

:::{style="margin-top: 20px;"}
:::

:::{.fragment .fade-in}
```{python}
#| echo: true
#| eval: true
list_ids = ["KIA", "Ferrari", "Ford", "Tesla"]

for i in list_ids:
    print("Dear customer, we are writing about your " + i + " car.")
```
:::

:::{.fragment .fade-in}
- This is much better! 😎
:::
:::

## You can also iterate over additional elements

:::{style="margin-top: 30px; font-size: 24px;"}
- This code iterates over each element in `list_ids` and three additional elements: 'a', 'b', and 'c'. 
- The `+` operator is used to concatenate `list_ids` with another list `['a', 'b', 'c']`.

- For each element in this combined list, the loop assigns the element to the variable `id` and then prints it out using the `print` function.

```{python}
#| echo: true
#| eval: true
for id in list_ids + ['a', 'b', 'c']:
    print(id)
```
:::

## Iterating with `range()`

:::{style="margin-top: 30px; font-size: 24px;"}
The `range()` function is often used with `for` loops to generate a sequence of numbers.

-   `range(stop)`: Generates numbers from 0 up to (but not including) `stop`.
    ```{python}
    #| echo: true
    #| eval: true
    for i in range(5): # Generates 0, 1, 2, 3, 4
        print(i)
    ```
-   `range(start, stop)`: Generates numbers from `start` up to (but not including) `stop`.
-   `range(start, stop, step)`: Generates numbers from `start` up to (but not including) `stop`, with an increment of `step`.
    ```{python}
    #| echo: true
    #| eval: true
    for i in range(2, 8, 2): # Generates 2, 4, 6
        print(i)
    ```
:::

## Iterating over strings

:::{style="margin-top: 30px; font-size: 24px;"}
Strings are sequences of characters, so you can iterate over them directly:

```{python}
#| echo: true
#| eval: true
course_name = "QTM 151"
for char in course_name:
    print(char)
```

This is useful for character-by-character processing.
:::

## Using `enumerate()`

:::{style="margin-top: 30px; font-size: 24px;"}
Sometimes you need both the index and the value of an item in a sequence. The `enumerate()` function provides this:

Syntax: `for index, value in enumerate(sequence):`

```{python}
#| echo: true
#| eval: true
fruits = ["apple", "banana", "cherry"]
for index, fruit in enumerate(fruits):
    print(f"Index {index}: {fruit}")
```

You can also specify a starting index for `enumerate()`: `enumerate(fruits, start=1)`
:::

## Customised messages + numbering {#sec:for}

:::{style="margin-top: 30px; font-size: 24px;"}
- You can also include numbers in your messages
- Initiate `index = 1` before the loop (just to start at 1, since Python indexes start at 0)
- Add `index = index + 1` at the end of the body

```{python}
#| echo: true
#| eval: true
list_ids = ["KIA", "Ferrari", "Ford", "Tesla"]

index = 1
print('We are out of the loop', index)
for id in list_ids:
    print("Dear customer, your position is " + str(index) + " on the waitlist" +
           " and your car brand is " + id )
    index = index + 1
    print('We are inside the loop', index)
```
:::

## Another example

:::{style="margin-top: 30px; font-size: 24px;"}
```{python}
#| echo: true
#| eval: true
for i in range(len(list_ids)):
    print("Dear customer, your position is " + str(i+1) + " on the waitlist" +
           " and your car brand is " + list_ids[i])
```

- Who can explain to me what `range(len(list_ids))` does?
- And what does `str(i+1)` do?
- [[Appendix 01]{.button}](#sec:appendix1)
:::

## Saving time while coding!
### How to make your work easier with `for` loops

:::{style="margin-top: 30px; font-size: 20px;"}
- Boring 🥱

```{python}
#| echo: true
#| eval: true
import pandas as pd
import matplotlib.pyplot as plt

carfeatures = pd.read_csv("data/features.csv")
list_vars = ["acceleration","weight"]

variable_name = "acceleration"
plt.scatter(x = carfeatures[variable_name],
            y = carfeatures["mpg"])
plt.ylabel("mpg")
plt.xlabel(variable_name)
plt.show()

variable_name = "weight"
plt.scatter(x = carfeatures[variable_name], 
            y = carfeatures["mpg"])
plt.ylabel("mpg")
plt.xlabel(variable_name)
plt.show()
```
:::

## Cool 😎

:::{style="margin-top: 30px; font-size: 24px;"}

```{python}
#| echo: true
#| eval: true
carfeatures = pd.read_csv("data/features.csv")
list_vars = ["acceleration","weight"]

for variable_name in list_vars:
    plt.scatter(x = carfeatures[variable_name],
                y = carfeatures["mpg"])
    plt.ylabel("mpg")
    plt.xlabel(variable_name)
    plt.show()
```
:::

## Even cooler! 🤩

:::{style="margin-top: 30px; font-size: 24px;"}
```{python}
#| echo: true
#| eval: true
carfeatures = pd.read_csv("data/features.csv")
list_vars   = ["acceleration","weight"]

index = 1
for variable_name in list_vars:
    plt.scatter(x= carfeatures[variable_name], y = carfeatures["mpg"])
    plt.ylabel("mpg")
    plt.xlabel(variable_name)
    plt.title("Figure " + str(index))
    plt.show()
    index = index + 1
```
:::

## Solving many equations at once

:::{style="margin-top: 30px; font-size: 24px;"}
- Solve the equation $y = x^2 + 2x$ for $x = 1,2,4,5,6,7,8,9,10$

```{python}
#| echo: true
#| eval: true
# Create a list of x-values list_x = [1,2,4,5, ..., 50]
# Create a list of y-values to fill in later.

list_x = [1,2,4,5,6,7,8,9,10]
list_y = [None] * len(list_x)

# Create an index 
index = 0
for x in list_x:
    list_y[index] = list_x[index]**2 + 2*list_x[index]
    index = index + 1

# Display results visually
print(list_y)
plt.scatter(list_x, list_y)
plt.xlabel("X-axis")
plt.ylabel("Y-axis")
plt.title("Scatter plot of Y = X^2 + 2X")
plt.show()
```
:::

## Math equations using `append`

:::{style="margin-top: 30px; font-size: 24px;"}
```{python}
#| echo: true
#| eval: true
# Create a list of x-values list_x = [1,2,4,5, ..., 50]
# Start an empty list of y-values with []

list_x = [1,2,4,5,6,7,8,9,10]
list_y = []

# Create an index 
for x in list_x:
    y = x**2 + 2*x
    list_y.append(y)

# Display results visually
print(list_y)
plt.scatter(list_x, list_y)
plt.xlabel("X-axis")
plt.ylabel("Y-axis")
```
:::

## Try it yourself! 🧠 {#sec:exercise2}

:::{style="margin-top: 30px; font-size: 24px;"}
- There are two datasets in the `data` folder:
  - `features.csv`
  - `worldbank_wdi_2019.csv`
- Create a new object called `list_datasets` and assign it a list with the two dataset names
- Run a for loop over this list:
  - Read each of the datasets using `pd.read_csv()`
  - Print a table of descriptive statistics for each dataset

- [[Appendix 02]{.button}](#sec:appendix2)
:::

# While loops in Python ⏳🐍 {background-color="#2d4563"}

## What is a `while` loop?

:::{style="margin-top: 30px; font-size: 24px;"}
:::{.columns}
:::{.column width="50%"}
- A `while` loop is used to iterate over a block of code as long as the test expression (condition) is `True`
- We use `while` loops when we don't know the number of times to iterate beforehand, or when the iteration depends on a condition being met
- Syntax:
```{verbatim}
while test_expression:
    Body of while loop
    (must include logic to eventually make test_expression False)
```
:::
:::{.column width="50%"}
![](figures/while.png)
:::
:::
:::

## When to Use `while` vs `for`

:::{style="margin-top: 30px; font-size: 28px;"}
-   **`for` loop:**
    -   Use when you know the number of iterations or you are iterating over a known sequence (list, string, range, etc.).
    -   Example: "Process each item in this list."

-   **`while` loop:**
    -   Use when the number of iterations is not known in advance and depends on a condition becoming `False`.
    -   Example: "Keep doing this until a certain condition is met (e.g., user enters 'quit', or a calculation converges)."
    -   Requires careful management of the condition to avoid infinite loops.
:::

## `while` loop: simple counter example

:::{style="margin-top: 30px; font-size: 24px;"}
This `while` loop acts like `for i in range(5):`

```{python}
#| echo: true
#| eval: true
count = 0  # 1. Initialise a counter variable
while count < 5:  # 2. Set the condition
    print(f"Count is: {count}")
    count = count + 1  # Update the counter (SERIOUSLY! 😂)
print("Loop finished.")
```
If `count = count + 1` is forgotten, it creates an infinite loop!
:::

## `while` loop: user input validation

:::{style="margin-top: 30px; font-size: 22px;"}
`while` loops are great for repeatedly asking for user input until it's valid

```{python}
#| echo: true
#| eval: false # This would hang in a non-interactive Quarto render
# Example: Get a positive number from the user
number = -1 # Initialise to a value that fails the condition
while number <= 0:
    try:
        user_input = input("Please enter a positive number: ")
        number = float(user_input) # Try to convert to float
        if number <= 0:
            print("That's not a positive number. Try again.")
    except ValueError:
        print("Invalid input. Please enter a number.")
print(f"You entered a valid positive number: {number}")
```

(This code is best run in an interactive Python session.)
:::

## Caution: Infinite Loops!

:::{style="margin-top: 30px; font-size: 24px;"}
A common pitfall with `while` loops is creating an **infinite loop**!
- This happens if the condition in the `while` statement never becomes `False`
- **Cause:** Often due to forgetting to update the variable(s) involved in the condition within the loop

Example of an infinite loop (DO NOT RUN THIS CELL AS IS 😅):
```python
#| echo: true
#| eval: false # This would run forever
count = 0
while count < 5:
    print("Still looping...")
    # Missing count = count + 1
```
- If you accidentally run an infinite loop in a Jupyter notebook or Python script, you usually need to interrupt the kernel (e.g., by pressing `Ctrl+C` in the terminal, or using the "Interrupt Kernel" button in Jupyter).
:::

## Try it yourself! {#sec:exercise_for_break_simple}

:::{style="margin-top: 30px; font-size: 24px;"}
- You have the following list of sports: `list_sports = ["tennis","golf","golf","tennis","golf","golf"]`
- Write a `while` loop to find the second occurrence of "tennis" in the list
- You can start with the following code:
```{python}
#| echo: true
#| eval: false
list_sports = ["tennis","golf","golf","tennis","golf","golf"]
candidate_list = []
num_candidates = 0

while...
    # Add your code here
    # Use candidate_list.append() to add the found elements
    # Use num_candidates to count the number of occurrences
```

- [[Appendix 03]{.button}](#sec:appendix3_for_break_simple)
:::

# Loop control statements 🚦 {background-color="#2d4563"}

## Introduction to loop control

:::{style="margin-top: 30px; font-size: 27px;"}
:::{.columns}
:::{.column width="50%"}
Python provides statements to control the flow of execution within loops:

-   **`break`**: Terminates the current loop prematurely and transfers control to the statement immediately following the loop.
-   **`continue`**: Skips the rest of the code inside the current iteration of the loop and proceeds to the next iteration.
-   **`else` clause in loops**: An optional block that executes if the loop completes all its iterations without encountering a `break` statement.
:::

:::{.column width="50%"}
:::{style="margin-top: -30px; text-align: center;"}
![](figures/break.png)
:::
:::
:::
:::

## The `break` statement

:::{style="margin-top: 30px; font-size: 22px;"}
- The `break` statement is used to exit a `for` or `while` loop immediately, regardless of whether the loop's condition is still true or if there are more items to iterate over

Example: Find the first non-integer element in a list and stop the loop
```{python}
#| echo: true
#| eval: true
list_mixed = [1, 2, "text_message", 5, 10.5]
print(f"Original list: {list_mixed}")

for value in list_mixed:
    if not isinstance(value, int): # Check if value is NOT an integer
        print(f"Stopped: Found a non-integer element: '{value}' (type: {type(value).__name__})")
        break # Exit the loop
    print(f"Processing integer: {value}")
print("Loop finished or broken.")
```
:::

## The `continue` statement

:::{style="margin-top: 30px; font-size: 22px;"}
- The `continue` statement is used to skip the remaining code inside the current iteration of a loop and move to the next iteration

Example: Print only integers from a list and skip non-integer elements
```{python}
#| echo: true
#| eval: true
list_mixed = [1, 2, "text_message", 5, 10.5, "another_string", 7]
print(f"Original list: {list_mixed}\nPrinting only integers:")

for value in list_mixed:
    if not isinstance(value, int):
        print(f"  Skipping non-integer: '{value}'")
        continue # Skip to the next iteration
    print(f"Integer found: {value}")
print("Loop finished processing all elements.")
```
:::

## Loops with an `else` clause

:::{style="margin-top: 30px; font-size: 22px;"}
- Both `for` and `while` loops can have an optional `else` clause
- The `else` block is executed **if and only if** the loop terminates normally (i.e., not by a `break` statement)

Example with `for` and `else`: Searching for an item
```{python}
#| echo: true
#| eval: true
my_numbers = [1, 3, 5, 7, 9]
search_for = 6

for num in my_numbers:
    if num == search_for:
        print(f"Found {search_for} in the list.")
        break
else: # Executed if the loop completes without a break
    print(f"{search_for} was not found in the list.")

search_for = 5 # Try again with a number that is in the list
for num in my_numbers:
    if num == search_for:
        print(f"Found {search_for} in the list.")
        break
else:
    print(f"{search_for} was not found in the list.")
```
:::

# List comprehensions ⚡️ {background-color="#2d4563"}

## What are list comprehensions?

:::{style="margin-top: 30px; font-size: 24px;"}
- List comprehensions provide a concise and readable way to create lists
- They often achieve the same result as a `for` loop (and sometimes an `if` condition) but in a single line of code.
- **Basic Syntax:**
  `new_list = [expression for item in iterable]`

Advantages:
-   More compact and often easier to read for simple list generations
-   Can be more efficient than using a `for` loop with `append()`
:::

## List comprehension examples

:::{style="margin-top: 30px; font-size: 22px;"}
**Example 1: Customised Messages**
```{python}
#| echo: true
#| eval: true
id_list = ["KIA", "Ferrari", "Ford", "Tesla"]
message_list = ["Your car model is: " + car_id for car_id in id_list]
print(message_list)
```

**Example 2: Math operations**
```{python}
#| echo: true
#| eval: true
x_list_lc = [1, 2, 3, 4, 5, 6, 7]
x_sqr_list = [x**2 for x in x_list_lc]
print(f"Original list: {x_list_lc}")
print(f"Squared list:  {x_sqr_list}")
```
:::

## List comprehensions with conditionals

:::{style="margin-top: 30px; font-size: 24px;"}
You can add an `if` condition to filter items during list creation.

-   **Syntax with `if`:**
    `new_list = [expression for item in iterable if condition]`

Example: Create a list of squares of only the even numbers from 0 to 9.
```{python}
#| echo: true
#| eval: true
squares_of_evens = [x**2 for x in range(10) if x % 2 == 0]
print(f"Squares of even numbers from 0-9: {squares_of_evens}")

# Equivalent for loop:
# squares_of_evens_loop = []
# for x in range(10):
#     if x % 2 == 0:
#         squares_of_evens_loop.append(x**2)
# print(squares_of_evens_loop)
```
:::

## Try it yourself! 🧠 {#sec:exercise_list_comp}

:::{style="margin-top: 30px; font-size: 24px;"}
You have a list of names:
`names = ["Alice", "Bob", "Charlie", "David", "Eve", "Fiona", "George"]`

1.  Using a list comprehension, create a new list called `short_names` that contains only the names from the `names` list that have 5 or fewer characters.
2.  Using a list comprehension, create a new list called `uppercase_long_names` that contains the uppercase versions of names from the `names` list that have more than 5 characters.

- [[Appendix 04]{.button}](#sec:appendix4_list_comp)
:::

# And that's all for today! 🎉 {background-color="#2d4563"}

# Thank you for your attention! 🙏🏽😊 {background-color="#2d4563"}

## Appendix 01 {#sec:appendix1}

:::{style="margin-top: 30px; font-size: 21px;"}
1. `range(len(list_ids))`:
   - `len(list_ids)` gets the length (number of items) in the `list_ids` list.
   - `range()` then creates a sequence of numbers from 0 up to (but not including) that length.
   - This allows the loop to iterate over each index of the list[1].

2. `str(i+1)`:
   - `i` is the current loop index, starting at 0.
   - `i+1` adds 1 to that index so that the position number starts at 1. (Remember: Python indexes start at 0.)
   - `str()` converts the resulting number to a string[2].
   - This is done because `i` starts at 0, but we want to display position numbers starting at 1 for the customers.

So, this code loops through each item in `list_ids`, printing a message for each customer that includes:
- Their position (index + 1)
- The corresponding car brand from `list_ids`

The loop will run once for each item in `list_ids`, with `i` taking on values from 0 to `len(list_ids) - 1`.
  
[[Back to the main text]{.button}](#sec:for)
:::

## Appendix 02 {#sec:appendix2}

:::{style="margin-top: 30px; font-size: 21px;"}
```{python}
#| echo: true
#| eval: true
import pandas as pd
list_datasets = ["features.csv", "worldbank_wdi_2019.csv"]
for dataset in list_datasets:
    data = pd.read_csv("data/" + dataset)
    print(f"Descriptive statistics for {dataset}:")
    print(data.describe())
    print("\n")
```

- [[Back to the main text]{.button}](#sec:exercise2)
:::

## Appendix 03 {#sec:appendix3_for_break_simple}

:::{style="margin-top: 30px; font-size: 21px;"}
```{python}
#| echo: true
#| eval: true
list_sports = ["tennis","golf","golf","tennis","golf","golf"]
candidate_list = []
num_candidates = 0
index = 0
while index < len(list_sports):
    if list_sports[index] == "tennis":
        candidate_list.append(list_sports[index])
        num_candidates = num_candidates + 1
        if num_candidates == 2:
            break
    index = index + 1
print(f"Second occurrence of 'tennis': {candidate_list}")
```

- [[Back to the main text]{.button}](#sec:exercise_for_break_simple)
:::

## Appendix 04: Solution for List Comprehensions Exercise {#sec:appendix4_list_comp}

:::{style="margin-top: 30px; font-size: 21px;"}
Solution for the list comprehension "Try it yourself!" exercise:

```{python}
#| echo: true
#| eval: true
names = ["Alice", "Bob", "Charlie", "David", "Eve", "Fiona", "George"]

# 1. Names with 5 or fewer characters
short_names = [name for name in names if len(name) <= 5]
print(f"Original names: {names}")
print(f"Short names (<= 5 chars): {short_names}")

# 2. Uppercase versions of names longer than 5 characters
uppercase_long_names = [name.upper() for name in names if len(name) > 5]
print(f"Uppercase long names (> 5 chars): {uppercase_long_names}")
```

[[Back to the main text]{.button}](#sec:exercise_list_comp)
:::